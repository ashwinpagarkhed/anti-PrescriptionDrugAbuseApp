/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.UserRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.StoreOrganization;
import Business.Organization.GoverningBodyOrganization;
import Business.Organization.Organization;
import static Business.Organization.Organization.GoverningBodyEnterpriseOrganizationType.StoreOrganization;
import Business.UserAccount.StoreAccount;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PrescriptionRequest;
import Business.WorkQueue.WorkRequest;
import com.itextpdf.text.Chunk;
import helper.Helper;
import helper.Prescription;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import helper.Medicine;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author ashwin
 */
public class PrescriptionJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount userAccount;
    EcoSystem system;
    
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    /**
     * Creates new form PrescriptionJPanel
     */
    public PrescriptionJPanel(JPanel userProcessContainer, UserAccount userAccount, EcoSystem system) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.system = system;
        prescriptionTable.setFillsViewportHeight(true);
        populateTable();
        
        storeComboBox.removeAllItems();
        
        Organization currentNetworkGoverningOrg = null;
        
        for(Network network: system.getNetworkList()){
            if(network.getName().equals(userAccount.getNetwork().getName())) {
                for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                    if(enterprise.getEnterpriseType() == Enterprise.EnterpriseType.GoverningBody) {
                        for(Organization organization: enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if(organization instanceof StoreOrganization){
                                currentNetworkGoverningOrg = organization;
                                break;
                            }
                        }
                    }
                }
            }
        }
                
        if (currentNetworkGoverningOrg != null) {
            for(UserAccount account : currentNetworkGoverningOrg.getUserAccountDirectory().getUserAccountList()){
                StoreAccount storeAccount = (StoreAccount) account;
                storeComboBox.addItem(storeAccount);
            }
        }
    }
    
    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) prescriptionTable.getModel();
        dtm.setRowCount(0);
        
        ArrayList<Prescription> prescriptions = new ArrayList<>();
        
        for(WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList()){
            PrescriptionRequest prescriptionWorkRequest = (PrescriptionRequest) workRequest;
            
            prescriptions.add(prescriptionWorkRequest.getPrescription());
        }
        
        for (Prescription prescription : userAccount.getListOfPrescriptions()) {
            if(!prescriptions.contains(prescription)) {
                Object row[] = new Object[2];
                row[0] = prescription;
                row[1] = prescription.getTimeIssued();
                dtm.addRow(row);
            }
        }
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnReqToGovernOrg = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        prescriptionTable = new javax.swing.JTable();
        storeComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1225, 700));
        setMinimumSize(new java.awt.Dimension(1225, 700));
        setPreferredSize(new java.awt.Dimension(1225, 700));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel1.setText("Following are your list of prescriptions which are not processed");

        btnReqToGovernOrg.setBackground(new java.awt.Color(255, 255, 255));
        btnReqToGovernOrg.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnReqToGovernOrg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Send.png"))); // NOI18N
        btnReqToGovernOrg.setText("Send Prescription to GovernOrg");
        btnReqToGovernOrg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnReqToGovernOrgMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnReqToGovernOrgMouseExited(evt);
            }
        });
        btnReqToGovernOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReqToGovernOrgActionPerformed(evt);
            }
        });

        prescriptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Issued Date and Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        prescriptionTable.setGridColor(new java.awt.Color(255, 255, 255));
        prescriptionTable.setRowHeight(22);
        jScrollPane2.setViewportView(prescriptionTable);

        storeComboBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        storeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel2.setText("Select Store");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/download.png"))); // NOI18N
        jButton1.setText("Download Prescription");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(181, 181, 255));
        jPanel3.setMaximumSize(new java.awt.Dimension(1225, 100));
        jPanel3.setMinimumSize(new java.awt.Dimension(1225, 100));
        jPanel3.setPreferredSize(new java.awt.Dimension(1225, 100));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Manage Prescription");

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/back.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReqToGovernOrg, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(storeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(287, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(storeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(44, 44, 44)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(btnReqToGovernOrg)
                .addGap(210, 210, 210))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnReqToGovernOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReqToGovernOrgActionPerformed
        int selectedRow = prescriptionTable.getSelectedRow();
       
        if(selectedRow >= 0) {
            Prescription prescription = (Prescription) prescriptionTable.getValueAt(selectedRow, 0);
            PrescriptionRequest request = new PrescriptionRequest();
            request.setMessage("");
            request.setSender(userAccount);
            request.setPrescription(prescription);
            request.setStatus(Helper.WorkRequestStatus.WaitingForRoutingAtGoverningBody);
            request.setRequestDate(new Date());


            StoreAccount storeAccount = (StoreAccount) storeComboBox.getSelectedItem();
            if(storeAccount == null) {
                JOptionPane.showMessageDialog(null, "Please select a store to which you want the prescriotion sent to.");
                return;
            }
            request.setStoreAccount(storeAccount);

            Organization currentNetworkGoverningOrg = null;

            for(Network network: system.getNetworkList()){
                if(network.getName().equals(userAccount.getNetwork().getName())) {
                    for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                        if(enterprise.getEnterpriseType() == Enterprise.EnterpriseType.GoverningBody) {
                            for(Organization organization: enterprise.getOrganizationDirectory().getOrganizationList()) {
                                if(organization instanceof GoverningBodyOrganization){
                                    currentNetworkGoverningOrg = organization;
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            if (currentNetworkGoverningOrg != null) {

                currentNetworkGoverningOrg.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);

                dB4OUtil.storeSystem(system);

                populateTable();
                JOptionPane.showMessageDialog(null, "Request is sent to governing org");
            }
        }
        
        else {
            JOptionPane.showMessageDialog(null, "Please select a prescription to send to governing body.");
        }
    }//GEN-LAST:event_btnReqToGovernOrgActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Document document = new Document(PageSize.A4, 50, 50, 50, 50);
        document.addAuthor("Surya");
        
        int selectedRow = prescriptionTable.getSelectedRow();
        
        if(selectedRow >= 0 ) {
            Prescription prescription = (Prescription) prescriptionTable.getValueAt(selectedRow, 0);

            document.addSubject("Prescription for " + prescription.getPatient().getEmployee().getName() + " from " + prescription.getDoctor());

            try {
                PdfWriter.getInstance(document , new FileOutputStream("medicines.pdf"));
            } catch (FileNotFoundException | DocumentException ex) {
                Logger.getLogger(PrescriptionJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            document.open();

            try {
                document.add(new Paragraph("Prescription for " + prescription.getPatient().getEmployee().getName() + " from " + prescription.getDoctor()));
                document.add( Chunk.NEWLINE );
            } catch (DocumentException ex) {
                Logger.getLogger(PrescriptionJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            PdfPTable table = new PdfPTable(2);

            table.addCell("Medicine Name");
            table.addCell("Quantity");

            for(Medicine medicine: prescription.getMedicines()) {
                String medicineName = medicine.getName();
                Integer quantity = medicine.getQuantity();

                table.addCell(medicineName);
                table.addCell(Integer.toString(quantity));
            }

            try {
                document.add(table);
            } catch (DocumentException ex) {
                Logger.getLogger(PrescriptionJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            document.close();
            JOptionPane.showMessageDialog(null, "Prescription is downloaded");
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a prescription to download.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
public void setColor(JButton p){
        p.setBackground(new Color(102,102,255));
    }
    public void resetColor(JButton p1){
        p1.setBackground(new Color(255,255,255));
        
    }
    private void btnReqToGovernOrgMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReqToGovernOrgMouseEntered
        // TODO add your handling code here:
        setColor(btnReqToGovernOrg);
    }//GEN-LAST:event_btnReqToGovernOrgMouseEntered

    private void btnReqToGovernOrgMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReqToGovernOrgMouseExited
        // TODO add your handling code here:
        resetColor(btnReqToGovernOrg);
    }//GEN-LAST:event_btnReqToGovernOrgMouseExited

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
        setColor(jButton1);
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
        resetColor(jButton1);
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReqToGovernOrg;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable prescriptionTable;
    private javax.swing.JComboBox<StoreAccount> storeComboBox;
    // End of variables declaration//GEN-END:variables
}
