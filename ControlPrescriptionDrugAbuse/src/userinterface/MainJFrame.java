/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import Business.EcoSystem;
import Business.DB4OUtil.DB4OUtil;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.DoctorAccount;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.UserRole.UserSignUp;
import userinterface.UserRole.UserWorkAreaJPanel;
import helper.Helper;
import static helper.Helper.getTOTPCode;
import java.awt.BorderLayout;
import java.awt.Image;
import javax.swing.ImageIcon;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.SplashScreen;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JLabel;
import userinterface.Admin.AdminSignup;

/**
 *
 * @author ashwin
 */
public class MainJFrame extends javax.swing.JFrame {

    static SplashScreen mySplash;                   // instantiated by JVM we use it to get graphics
    static Graphics2D splashGraphics;               // graphics context for overlay of the splash image
    static Rectangle2D.Double splashTextArea;       // area where we draw the text
    static Rectangle2D.Double splashProgressArea;   // area where we draw the progress bar
    static Font font; 

    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private JPanel userProcessContainer;
    
    public MainJFrame() {
        initComponents();
        system = dB4OUtil.retrieveSystem();
        //this.setSize(1680, 1050);
        if(system.getNetworkList().size() == 0)
            btnSignUp.setEnabled(false);
        else
            btnSignUp.setEnabled(true);
        if(system.getUserAccountDirectory().getUserAccountList().size() > 0) {
            adminSignUpBtn.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        btnLogin = new javax.swing.JButton();
        userNameJTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        loginJLabel = new javax.swing.JLabel();
        logoutJButton = new javax.swing.JButton();
        btnSignUp = new javax.swing.JButton();
        adminSignUpBtn = new javax.swing.JButton();
        container = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1400, 700));

        jSplitPane1.setMaximumSize(new java.awt.Dimension(1400, 700));
        jSplitPane1.setMinimumSize(new java.awt.Dimension(1400, 700));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1400, 700));

        jPanel1.setBackground(new java.awt.Color(199, 199, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(200, 700));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 700));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 700));

        btnLogin.setBackground(new java.awt.Color(255, 255, 255));
        btnLogin.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Login.png"))); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLoginMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLoginMouseExited(evt);
            }
        });
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblUserName.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        lblUserName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Username.png"))); // NOI18N
        lblUserName.setText("User Name");

        lblPassword.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        lblPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Password.png"))); // NOI18N
        lblPassword.setText("Password");

        logoutJButton.setBackground(new java.awt.Color(255, 255, 255));
        logoutJButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        logoutJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Logout.png"))); // NOI18N
        logoutJButton.setText("Logout");
        logoutJButton.setEnabled(false);
        logoutJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutJButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutJButtonMouseExited(evt);
            }
        });
        logoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutJButtonActionPerformed(evt);
            }
        });

        btnSignUp.setBackground(new java.awt.Color(255, 255, 255));
        btnSignUp.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnSignUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Signup.png"))); // NOI18N
        btnSignUp.setText("User Sign Up");
        btnSignUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSignUpMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSignUpMouseExited(evt);
            }
        });
        btnSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignUpActionPerformed(evt);
            }
        });

        adminSignUpBtn.setBackground(new java.awt.Color(255, 255, 255));
        adminSignUpBtn.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        adminSignUpBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Signup.png"))); // NOI18N
        adminSignUpBtn.setText("Admin Sign Up");
        adminSignUpBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                adminSignUpBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                adminSignUpBtnMouseExited(evt);
            }
        });
        adminSignUpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminSignUpBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordField)
                    .addComponent(lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSignUp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userNameJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(136, 136, 136)
                                .addComponent(loginJLabel))
                            .addComponent(lblUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(adminSignUpBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblUserName)
                .addGap(18, 18, 18)
                .addComponent(userNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPassword)
                .addGap(18, 18, 18)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(loginJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogin)
                .addGap(34, 34, 34)
                .addComponent(logoutJButton)
                .addGap(161, 161, 161)
                .addComponent(adminSignUpBtn)
                .addGap(37, 37, 37)
                .addComponent(btnSignUp)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        container.setBackground(new java.awt.Color(199, 199, 255));
        container.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        container.setMaximumSize(new java.awt.Dimension(1220, 700));
        container.setMinimumSize(new java.awt.Dimension(1220, 700));
        container.setName(""); // NOI18N
        container.setPreferredSize(new java.awt.Dimension(1220, 700));
        container.setLayout(new java.awt.CardLayout());
        jSplitPane1.setRightComponent(container);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignUpActionPerformed
        // TODO add your handling code here:
        logoutJButtonActionPerformed(null);
        CardLayout layout = (CardLayout)container.getLayout();
        container.add(new UserSignUp(container, system));
        layout.next(container);
    }//GEN-LAST:event_btnSignUpActionPerformed

    private void btnSignUpMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSignUpMouseExited
        // TODO add your handling code here:
        resetColor(btnSignUp);
    }//GEN-LAST:event_btnSignUpMouseExited

    private void btnSignUpMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSignUpMouseEntered
        // TODO add your handling code here:
        setColor(btnSignUp);
    }//GEN-LAST:event_btnSignUpMouseEntered

    private void logoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutJButtonActionPerformed
        logoutJButton.setEnabled(false);
        userNameJTextField.setEnabled(true);
        passwordField.setEnabled(true);
        btnLogin.setEnabled(true);

        userNameJTextField.setText("");
        passwordField.setText("");

//        container.removeAll();
//        JPanel blankJP = new JPanel();
//        container.add("blank", blankJP);
//        CardLayout crdLyt = (CardLayout) container.getLayout();
//        crdLyt.next(container);

        CardLayout layout = (CardLayout)container.getLayout();
        container.add(new LogoutScreen1(container, system));
        layout.next(container);
        
        
        dB4OUtil.storeSystem(system);
        if(system.getNetworkList().size() == 0)
            btnSignUp.setEnabled(false);
        else
            btnSignUp.setEnabled(true);
    }//GEN-LAST:event_logoutJButtonActionPerformed

    private void logoutJButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutJButtonMouseExited
        // TODO add your handling code here:
        resetColor(logoutJButton);
    }//GEN-LAST:event_logoutJButtonMouseExited

    private void logoutJButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutJButtonMouseEntered
        // TODO add your handling code here:
        setColor(logoutJButton);
    }//GEN-LAST:event_logoutJButtonMouseEntered

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Get user name
        String userName = userNameJTextField.getText();
        // Get Password
        char[] passwordCharArray = passwordField.getPassword();
        String password = String.valueOf(passwordCharArray);

        if(system.authenticateUser(userName, password)) {
            UserAccount userAccount = system.getUserAccountFromDir(userName);
            CardLayout layout = (CardLayout)container.getLayout();
            container.add(new UserWorkAreaJPanel(container, userAccount, system));
            layout.next(container);

            btnLogin.setEnabled(false);
            logoutJButton.setEnabled(true);
            userNameJTextField.setEnabled(false);
            passwordField.setEnabled(false);

            return;
        }

        //Step1: Check in the system admin user account directory if you have the user
        UserAccount userAccount=system.getUserAccountDirectory().authenticateUser(userName, password);
        
        if(userAccount != null) {
            String totpCode = getTOTPCode(userAccount.getSecretCode());
            
            JFrame frame = new JFrame("Key secret");

            String key = JOptionPane.showInputDialog(frame, "What's the key?");
            if(key != null){
                if(!key.equals(totpCode)){
                    JOptionPane.showMessageDialog(null, "Invalid code.");
                    return;
                }
            }
            else
                return;
        }

        Enterprise inEnterprise=null;
        Organization inOrganization=null;
        UserAccount isPatient=null;
        if(userAccount==null){
            //Step 2: Go inside each network and check each enterprise
            for(Network network:system.getNetworkList()){
                //Step 2.a: check against each enterprise
                for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){
                    userAccount=enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                    if(userAccount==null){
                        //Step 3:check against each organization for each enterprise
                        for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList()){
                            userAccount=organization.getUserAccountDirectory().authenticateUser(userName, password);
                            if(userAccount!=null){
                                inEnterprise=enterprise;
                                inOrganization=organization;
                                if(organization instanceof DoctorOrganization){
                                    DoctorAccount dr = (DoctorAccount) userAccount;
                                    if(!dr.isLicense()){
                                        JOptionPane.showMessageDialog(null, "Licence is revoked, you cannot login");
                                        return;
                                    }
                                }
                                break;
                            }
                        }
                        if(userAccount==null){
                            //                            System.out.println("u- "+ system.getUserAccountDirectory());
                            //                            DoctorOrganization organization1 = new DoctorOrganization();
                            //                            System.out.println(organization1.getUserAccountDirectory().getUserAccountList());
                            //                            EnforcementOrganization organization2 = new EnforcementOrganization();
                            //                            System.out.println(organization2.getUserAccountDirectory());
                            //                            for(StoreOrganization organization:Organization.GoverningBodyEnterpriseOrganizationType.StoreOrganization){
                                //                                   System.out.println("organization -- " + organization);
                                //                                   userAccount=organization.getUserAccountDirectory().authenticateUser(userName, password);
                                //                                   if(userAccount!=null){
                                    //                                       inEnterprise=enterprise;
                                    //                                       inOrganization=organization;
                                    //                                       break;
                                    //                                   }
                                //                               }
                            //                            }
                    }
                }
                else{
                    inEnterprise=enterprise;
                    break;
                }
                if(inOrganization!=null){
                    break;
                }
            }
            if(inEnterprise!=null){
                break;
            }
        }
        }

        if(userAccount==null){
            JOptionPane.showMessageDialog(null, "Invalid credentials");
            return;
        }
        else{
            CardLayout layout=(CardLayout)container.getLayout();
            container.add("workArea",userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, system));
            layout.next(container);
        }

        btnLogin.setEnabled(false);
        logoutJButton.setEnabled(true);
        userNameJTextField.setEnabled(false);
        passwordField.setEnabled(false);
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnLoginMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoginMouseExited
        // TODO add your handling code here:
        resetColor(btnLogin);
    }//GEN-LAST:event_btnLoginMouseExited

    private void btnLoginMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoginMouseEntered
        // TODO add your handling code here:
        setColor(btnLogin);
    }//GEN-LAST:event_btnLoginMouseEntered

    private void adminSignUpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminSignUpBtnActionPerformed
        if(system.getUserAccountDirectory().getUserAccountList().size() > 0) {
            adminSignUpBtn.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Admin already exists");
            return;
        }
        CardLayout layout = (CardLayout)container.getLayout();
        container.add(new AdminSignup(container, system));
        layout.next(container);
    }//GEN-LAST:event_adminSignUpBtnActionPerformed

    private void adminSignUpBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminSignUpBtnMouseEntered
        // TODO add your handling code here:
        setColor(adminSignUpBtn);
    }//GEN-LAST:event_adminSignUpBtnMouseEntered

    private void adminSignUpBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminSignUpBtnMouseExited
        // TODO add your handling code here:
        resetColor(adminSignUpBtn);
    }//GEN-LAST:event_adminSignUpBtnMouseExited

    public void setColor(JButton p){
        p.setBackground(new Color(102,102,255));
    }
    public void resetColor(JButton p1){
        p1.setBackground(new Color(255,255,255));
        
    }
    
    private static void splashInit() {
        // the splash screen object is created by the JVM, if it is displaying a splash image

        mySplash = SplashScreen.getSplashScreen();
        // if there are any problems displaying the splash image
        // the call to getSplashScreen will returned null

        if (mySplash != null) {
            // get the size of the image now being displayed
            Dimension ssDim = mySplash.getSize();
            int height = ssDim.height;
            int width = ssDim.width;

            // stake out some area for our status information
            splashTextArea = new Rectangle2D.Double(15., height * 0.88, width * .1, 20.);
            splashProgressArea = new Rectangle2D.Double(width * .55, height * .92, width * .4, 12);

            // create the Graphics environment for drawing status info
            splashGraphics = mySplash.createGraphics();
            font = new Font("Dialog", Font.PLAIN, 14);
            splashGraphics.setFont(font);

            // initialize the status info
            splashText("Starting");
            splashProgress(0);
        }
    }

    private static void appInit() {
        for (int i = 1; i <= 100; i++) {
            try {
                Thread.sleep(40);
            } catch (InterruptedException ex) {
                break;
            }

            splashText(i + " %");     // tell the user what initialization task is being done
            splashProgress(i);            // give them an idea how much we have completed

        }
    }

    /**
     * Display text in status area of Splash. Note: no validation it will fit.
     *
     * @param str - text to be displayed
     */
    public static void splashText(String str) {
        if (mySplash != null && mySplash.isVisible()) {   // important to check here so no other methods need to know if there
            // really is a Splash being displayed

            // erase the last status text
            splashGraphics.setPaint(new Color(255, 208, 127));
            splashGraphics.fill(splashTextArea);

            // draw the text
            splashGraphics.setPaint(Color.BLACK);
            splashGraphics.drawString(str, (int) (splashTextArea.getX() + 10), (int) (splashTextArea.getY() + 15));

            // make sure it's displayed
            mySplash.update();
        }
    }

    /**
     * Display a (very) basic progress bar
     *
     * @param pct how much of the progress bar to display 0-100
     */
    public static void splashProgress(int pct) {
        if (mySplash != null && mySplash.isVisible()) {
            
            splashGraphics.setPaint(Color.LIGHT_GRAY);
            splashGraphics.fill(splashProgressArea);

            // draw an outline
            splashGraphics.setPaint(Color.BLUE);
            splashGraphics.draw(splashProgressArea);

            // Calculate the width corresponding to the correct percentage
            int x = (int) splashProgressArea.getMinX();
            int y = (int) splashProgressArea.getMinY();
            int wid = (int) splashProgressArea.getWidth();
            int hgt = (int) splashProgressArea.getHeight();

            int doneWidth = Math.round(pct * wid / 100.f);
            doneWidth = Math.max(0, Math.min(doneWidth, wid - 1));  // limit 0-width

            // fill the done part one pixel smaller than the outline
            splashGraphics.setPaint(Color.GREEN);
            splashGraphics.fillRect(x, y + 1, doneWidth, hgt - 1);

            // make sure it's displayed
            mySplash.update();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                splashInit();           // initialize splash overlay drawing parameters
                appInit();              // simulate what an application would do before starting
                if (mySplash != null)   // check if we really had a spash screen
                    mySplash.close();

                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adminSignUpBtn;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnSignUp;
    private javax.swing.JPanel container;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel loginJLabel;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField userNameJTextField;
    // End of variables declaration//GEN-END:variables
}
