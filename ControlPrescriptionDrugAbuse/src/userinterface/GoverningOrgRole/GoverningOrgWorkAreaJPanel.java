/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.GoverningOrgRole;

import userinterface.EnforcementRole.DoctorByPrescriptionAnalysis;
import userinterface.EnforcementRole.GoverningBodyAnalysis;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.GoverningBodyOrganization;
import Business.Organization.Organization;
import Business.Organization.StoreOrganization;
import Business.UserAccount.DoctorAccount;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PrescriptionRequest;
import Business.WorkQueue.WorkRequest;
import helper.Helper;
import helper.Prescription;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ashwin
 */
public class GoverningOrgWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private GoverningBodyOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private EcoSystem system;
    
    public GoverningOrgWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, GoverningBodyOrganization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.system = system;
        valueLabel.setText(userAccount.getEmployee().getName());
        workRequestJTable.setFillsViewportHeight(true);
        workRequestJTable1.setFillsViewportHeight(true);
        dispatchedTable.setFillsViewportHeight(true);
        populateAllTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshTestJButton = new javax.swing.JButton();
        valueLabel1 = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        valueLabel = new javax.swing.JLabel();
        btnSendToDoc = new javax.swing.JButton();
        doctorRequestsJPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        workRequestJTable1 = new javax.swing.JTable();
        storeRequestsJPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        dispatchedTable = new javax.swing.JTable();
        btnSendToStore1 = new javax.swing.JButton();
        btnSaveMsg = new javax.swing.JButton();
        btnSaveMsg1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1225, 700));
        setMinimumSize(new java.awt.Dimension(1225, 700));
        setPreferredSize(new java.awt.Dimension(1225, 700));

        refreshTestJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshTestJButton.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        refreshTestJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/refresh.png"))); // NOI18N
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshTestJButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshTestJButtonMouseExited(evt);
            }
        });
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        valueLabel1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        valueLabel1.setText("Hope you are doing well today!");

        enterpriseLabel.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        enterpriseLabel.setText("Hello Operator");

        jPanel1.setBackground(new java.awt.Color(181, 181, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel1.setText("Work requests from users");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Doctor", "Status", "Patient Name", "Time Issued"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setRowHeight(22);
        jScrollPane6.setViewportView(workRequestJTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane6)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );

        valueLabel.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N

        btnSendToDoc.setBackground(new java.awt.Color(255, 255, 255));
        btnSendToDoc.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        btnSendToDoc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Send.png"))); // NOI18N
        btnSendToDoc.setText("Send to doc");
        btnSendToDoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSendToDocMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSendToDocMouseExited(evt);
            }
        });
        btnSendToDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToDocActionPerformed(evt);
            }
        });

        doctorRequestsJPanel.setBackground(new java.awt.Color(181, 181, 255));
        doctorRequestsJPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel2.setText("Work requests routed from doctors");

        workRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Doctor", "Status", "Patient Name", "Time Issued"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable1.setGridColor(new java.awt.Color(255, 255, 255));
        workRequestJTable1.setRowHeight(22);
        jScrollPane5.setViewportView(workRequestJTable1);

        javax.swing.GroupLayout doctorRequestsJPanelLayout = new javax.swing.GroupLayout(doctorRequestsJPanel);
        doctorRequestsJPanel.setLayout(doctorRequestsJPanelLayout);
        doctorRequestsJPanelLayout.setHorizontalGroup(
            doctorRequestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctorRequestsJPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(doctorRequestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctorRequestsJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE))
                .addContainerGap())
        );
        doctorRequestsJPanelLayout.setVerticalGroup(
            doctorRequestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, doctorRequestsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        storeRequestsJPanel.setBackground(new java.awt.Color(181, 181, 255));
        storeRequestsJPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel3.setText("Please check all  store and dispatched  from store requests");

        dispatchedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Doctor", "Status", "Patient Name", "Time Issued"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dispatchedTable.setGridColor(new java.awt.Color(255, 255, 255));
        dispatchedTable.setRowHeight(22);
        jScrollPane4.setViewportView(dispatchedTable);

        javax.swing.GroupLayout storeRequestsJPanelLayout = new javax.swing.GroupLayout(storeRequestsJPanel);
        storeRequestsJPanel.setLayout(storeRequestsJPanelLayout);
        storeRequestsJPanelLayout.setHorizontalGroup(
            storeRequestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storeRequestsJPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(storeRequestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        storeRequestsJPanelLayout.setVerticalGroup(
            storeRequestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, storeRequestsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSendToStore1.setBackground(new java.awt.Color(255, 255, 255));
        btnSendToStore1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        btnSendToStore1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Send.png"))); // NOI18N
        btnSendToStore1.setText("Send to store");
        btnSendToStore1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSendToStore1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSendToStore1MouseExited(evt);
            }
        });
        btnSendToStore1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToStore1ActionPerformed(evt);
            }
        });

        btnSaveMsg.setBackground(new java.awt.Color(255, 255, 255));
        btnSaveMsg.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        btnSaveMsg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/message-text.png"))); // NOI18N
        btnSaveMsg.setText("Save Message");
        btnSaveMsg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMsgMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMsgMouseExited(evt);
            }
        });
        btnSaveMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMsgActionPerformed(evt);
            }
        });

        btnSaveMsg1.setBackground(new java.awt.Color(255, 255, 255));
        btnSaveMsg1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        btnSaveMsg1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/message-text.png"))); // NOI18N
        btnSaveMsg1.setText("Save Message");
        btnSaveMsg1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMsg1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMsg1MouseExited(evt);
            }
        });
        btnSaveMsg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMsg1ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(181, 181, 255));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Control Panel");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(enterpriseLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(valueLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(storeRequestsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(doctorRequestsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSendToStore1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSaveMsg1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSaveMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSendToDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshTestJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(valueLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshTestJButton)
                        .addGap(17, 17, 17)
                        .addComponent(btnSaveMsg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSendToDoc)
                        .addGap(110, 110, 110)
                        .addComponent(btnSaveMsg1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSendToStore1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doctorRequestsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(storeRequestsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
         
    private void btnSendToDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToDocActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow >= 0) {
            PrescriptionRequest currentRequest = (PrescriptionRequest) workRequestJTable.getValueAt(selectedRow, 4);
            currentRequest.setMessage(currentRequest.getMessage());
            currentRequest.setSender(userAccount);
            currentRequest.setStatus(Helper.WorkRequestStatus.RoutedToDoctor);
            Organization currentNetworkGoverningOrg = null;

            for (Network network : system.getNetworkList()) {
                if(currentRequest.getPrescription().getPatient().getNetwork().getName().equals(network.getName())){
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.GoverningBody) {
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                if (organization instanceof DoctorOrganization) {
                                    currentNetworkGoverningOrg = organization;
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            if (currentNetworkGoverningOrg != null) {
                currentNetworkGoverningOrg.getWorkQueue().getWorkRequestList().add(currentRequest);
                userAccount.getWorkQueue().getWorkRequestList().add(currentRequest);

                dB4OUtil.storeSystem(system);

                populateAllTables();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request from doctor.");
            return;
        }
        
    }//GEN-LAST:event_btnSendToDocActionPerformed
public void setColor(JButton p){
        p.setBackground(new Color(102,102,255));
    }
    public void resetColor(JButton p1){
        p1.setBackground(new Color(255,255,255));
        
    }
    private void btnSendToStore1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToStore1ActionPerformed
        List<PrescriptionRequest> requestList = new ArrayList<>();
        int selectedRow = workRequestJTable1.getSelectedRow();

        if (selectedRow >= 0) {
            PrescriptionRequest request = (PrescriptionRequest) workRequestJTable1.getValueAt(selectedRow, 4);

            if (request.getStatus().equals(Helper.WorkRequestStatus.RoutedToDoctor)) {
                JOptionPane.showMessageDialog(null, "Doctor has to approve or reject the request before you route it to store.");
                return;
            }
            if (request.getStatus().equals(Helper.WorkRequestStatus.RejectedByDoctor)) {
                JOptionPane.showMessageDialog(null, "Sorry the doctor has rejected the request, hence cannot be sent to the store.");
                return;
            }

            request.setSender(userAccount);
            request.setStatus(Helper.WorkRequestStatus.RoutedToStore);
            requestList.add(request);

            Organization currentNetworkGoverningOrg = null;

            for (Network network : system.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.GoverningBody) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof StoreOrganization) {
                                currentNetworkGoverningOrg = organization;
                                break;
                            }
                        }
                    }
                }
            }

            if (currentNetworkGoverningOrg != null) {
                for (PrescriptionRequest currentRequest : requestList) {
                    currentNetworkGoverningOrg.getWorkQueue().getWorkRequestList().add(currentRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(currentRequest);
                }

                dB4OUtil.storeSystem(system);
                populateAllTables();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request from doctor.");
            return;
        }
    }//GEN-LAST:event_btnSendToStore1ActionPerformed

    private void btnSendToDocMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendToDocMouseEntered
        // TODO add your handling code here:
        setColor(btnSendToDoc);
    }//GEN-LAST:event_btnSendToDocMouseEntered

    private void btnSendToDocMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendToDocMouseExited
        // TODO add your handling code here:
        resetColor(btnSendToDoc);
    }//GEN-LAST:event_btnSendToDocMouseExited

    private void btnSendToStore1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendToStore1MouseEntered
        // TODO add your handling code here:
        setColor(btnSendToStore1);
    }//GEN-LAST:event_btnSendToStore1MouseEntered

    private void btnSendToStore1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendToStore1MouseExited
        // TODO add your handling code here:
        resetColor(btnSendToStore1);
    }//GEN-LAST:event_btnSendToStore1MouseExited

    private void btnSaveMsgMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMsgMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveMsgMouseEntered

    private void btnSaveMsgMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMsgMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveMsgMouseExited

    private void btnSaveMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMsgActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow >= 0){
            PrescriptionRequest request = (PrescriptionRequest) workRequestJTable.getValueAt(selectedRow, 4);
            String message  = workRequestJTable.getValueAt(selectedRow, 0).toString();
            request.setMessage(message);
            dB4OUtil.storeSystem(system);
            populateUsersTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a work request from patients.");
            return;
        }
    }//GEN-LAST:event_btnSaveMsgActionPerformed

    private void btnSaveMsg1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMsg1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveMsg1MouseEntered

    private void btnSaveMsg1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMsg1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveMsg1MouseExited

    private void btnSaveMsg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMsg1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable1.getSelectedRow();
        if(selectedRow >= 0){
            PrescriptionRequest request = (PrescriptionRequest) workRequestJTable1.getValueAt(selectedRow, 4);
            String message  = workRequestJTable1.getValueAt(selectedRow, 0).toString();
            request.setMessage(message);
            dB4OUtil.storeSystem(system);
            populateDispatchTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a work request from doctor.");
            return;
        }
    }//GEN-LAST:event_btnSaveMsg1ActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateAllTables();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void refreshTestJButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshTestJButtonMouseExited
        // TODO add your handling code here:
        resetColor(refreshTestJButton);
    }//GEN-LAST:event_refreshTestJButtonMouseExited

    private void refreshTestJButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshTestJButtonMouseEntered
        // TODO add your handling code here:
        setColor(refreshTestJButton);
    }//GEN-LAST:event_refreshTestJButtonMouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveMsg;
    private javax.swing.JButton btnSaveMsg1;
    private javax.swing.JButton btnSendToDoc;
    private javax.swing.JButton btnSendToStore1;
    private javax.swing.JTable dispatchedTable;
    private javax.swing.JPanel doctorRequestsJPanel;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JPanel storeRequestsJPanel;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JLabel valueLabel1;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTable workRequestJTable1;
    // End of variables declaration//GEN-END:variables

    private void populateUsersTable() {
        DefaultTableModel dtm = (DefaultTableModel) workRequestJTable.getModel();
        dtm.setRowCount(0);
            
        for(WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList()) {
            if(workRequest.getStatus().equals(Helper.WorkRequestStatus.WaitingForRoutingAtGoverningBody)) {
                PrescriptionRequest prescriptionWorkRequest = (PrescriptionRequest) workRequest;

                Object row[] = new Object[6];
                row[0] = prescriptionWorkRequest.getMessage();
                row[1] = prescriptionWorkRequest.getSender();
                row[2] = prescriptionWorkRequest.getPrescription();
                row[3] = prescriptionWorkRequest.getStatus();
                row[4] = prescriptionWorkRequest;
                row[5] = prescriptionWorkRequest.getPrescription().getTimeIssued();
                dtm.addRow(row);
            }
        }
    }
    
    private void populateDoctorsRequestsTable() {
        DefaultTableModel dtm = (DefaultTableModel) workRequestJTable1.getModel();
        dtm.setRowCount(0);
            
        for(WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList()) {
            if(workRequest.getStatus().equals(Helper.WorkRequestStatus.ApprovedByDoctor) || 
               workRequest.getStatus().equals(Helper.WorkRequestStatus.RoutedToDoctor) ||
               workRequest.getStatus().equals(Helper.WorkRequestStatus.RejectedByDoctor)) {
                    PrescriptionRequest prescriptionWorkRequest = (PrescriptionRequest) workRequest;
                    
                    Object row[] = new Object[6];
                    row[0] = prescriptionWorkRequest.getMessage();
                    row[1] = prescriptionWorkRequest.getSender();
                    row[2] = prescriptionWorkRequest.getPrescription();
                    row[3] = prescriptionWorkRequest.getStatus();
                    row[4] = prescriptionWorkRequest;
                    row[5] = prescriptionWorkRequest.getPrescription().getTimeIssued();
                    dtm.addRow(row);
            }
        }
    }
    
    public void populateDispatchTable(){
        DefaultTableModel dtm = (DefaultTableModel) dispatchedTable.getModel();
        dtm.setRowCount(0);
        for(WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList()) {
            PrescriptionRequest prescriptionWorkRequest = (PrescriptionRequest) workRequest;
            if(prescriptionWorkRequest.getStoreAccount() != null){
                if(prescriptionWorkRequest.getStatus().toString().equals("ReadyForPickup") || prescriptionWorkRequest.getStatus().toString().equals("RoutedToStore")){
                    Object row[] = new Object[6];
                    row[0] = prescriptionWorkRequest.getMessage();
                    row[1] = prescriptionWorkRequest.getSender();
                    row[2] = prescriptionWorkRequest.getPrescription();
                    row[3] = prescriptionWorkRequest.getStatus();
                    row[4] = prescriptionWorkRequest;
                    row[5] = prescriptionWorkRequest.getPrescription().getTimeIssued();
                    dtm.addRow(row);
                }
            }
        }
    }

    private void populateAllTables() {
        populateUsersTable();
        populateDoctorsRequestsTable();
        populateDispatchTable();
    }
}
